#' @name geospark Geographic Sparklines for Time Series Visualization on a Map
#' @description Calculate geographically placed Sparklines upon statistical values
#'
#' @param coords Points coordinates
#' @param my_stats Values associated to points
#' @param width Width
#' @param height Height
#' @param mode normal mode or log mode
#'
#' @return returns a geometry collection (sfc)
#' @import magrittr sf dplyr
#' @export
geospark <- function(coords, my_stats, width, height, mode = "normal") {
max_v <- max(my_stats)
out <- lapply(1:nrow(coords), function(x) {
print(x)
v <- my_stats[x, ] %>% as.numeric
my_coords <- coords[x, ] %>% as.matrix
one_geospark(my_coords, v, max_v, width, height, mode)
})
res <- st_sfc(out)
return(res)
}
sp_line <- one_geospark(my_coords, v, width=100, height=100, mode="log")
#' moyenne dâ€™un vecteur
#' Une fonction pour faire une moyenne en enlevant les valeurs manquantes
#'
#' @name one_geospark Geographic Sparkline for Time-Series Visualization on a Map
#' @description Calculate a geographically placed Sparkline upon statistical values
#'
#' @param coords Point coordinates
#' @param v Values associated to point
#' @param max_v Maximum value
#' @param width width
#' @param height height
#' @param mode normal mode or log mode
#'
#' @return returns a geometry (sfg)
#' @import magrittr sf dplyr
#' @export
one_geospark <- function(coords, v, max_v = NULL, width, height, mode = "normal") {
if(is.null(max_v)) max_v <- max(v)
if(min(v)< 0) v <- v - min(v)
if(mode == "normal") {
mult <- height / max_v
heights <- v * mult
} else if (mode == "log"){
mult <- height / log(max_v)
log_v <- ifelse(v == 0, 0, log(v))
heights <- log_v * mult
}
coords_x <- coords[1] + seq(0, width, length.out = length(v))
coords_y <- coords[2] + heights
coords <- cbind(coords_x, coords_y)
## Line
sp_line <- st_linestring(coords)
return(sp_line)
}
one_geospark(my_coords, v, width=100, height=100, mode="log")
sp_line <- one_geospark(my_coords, v, width=100, height=100, mode="log")
i <- which(f$`Country/Region`=="France" & is.na(f$`Province/State`))
v <- my_stats[i, ] %>% as.numeric
my_coords <- coords[i, ] %>% as.matrix
sp_line <- one_geospark(my_coords, v, width=100, height=100, mode="log")
plot(st_geometry(sp_line))
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(geosparklines)
library(readr)
library(magrittr)
library(dplyr)
library(sf)
f <- read_csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")
coords <- f[, c("Long", "Lat")]
my_stats <- f[, 5:ncol(f)]
## Whole world
geosparks <- geospark(coords, my_stats, width=100, height=100, mode = "log")
plot(st_geometry(geosparks))
i <- which(f$`Country/Region`=="France" & is.na(f$`Province/State`))
v <- my_stats[i, ] %>% as.numeric
my_coords <- coords[i, ] %>% as.matrix
sp_line <- one_geospark(my_coords, v, width=100, height=100, mode="log")
plot(st_geometry(sp_line))
max_v <- max(my_stats)
## Add sparklines to initial file
st_geometry(f) <- geosparks
## Plot
plot(f %>%
mutate(v = ifelse(.$`4/17/20` <= 0, 0, log(.$`4/17/20`))) %>%
select(v))
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(geosparklines)
library(readr)
library(magrittr)
library(dplyr)
library(sf)
f <- read_csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")
coords <- f[, c("Long", "Lat")]
my_stats <- f[, 5:ncol(f)]
## Whole world
geosparks <- geospark(coords, my_stats, width=100, height=100, mode = "log")
plot(st_geometry(geosparks))
st_geometry(f) <- geosparks
## Plot
plot(f %>%
mutate(v = ifelse(.$`4/17/20` <= 0, 0, log(.$`4/17/20`))) %>%
select(v))
i <- which(f$`Country/Region`=="France" & is.na(f$`Province/State`))
v <- my_stats[i, ] %>% as.numeric
my_coords <- coords[i, ] %>% as.matrix
sp_line <- one_geospark(my_coords, v, width=100, height=100, mode="log")
plot(st_geometry(sp_line))
max_v <- max(my_stats)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(geosparklines)
library(readr)
library(magrittr)
library(dplyr)
library(sf)
f <- read_csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")
coords <- f[, c("Long", "Lat")]
my_stats <- f[, 5:ncol(f)]
## Whole world
geosparks <- geospark(coords, my_stats, width=100, height=100, mode = "log")
plot(st_geometry(geosparks))
st_geometry(f) <- geosparks
## Plot
plot(f %>%
mutate(v = ifelse(.$`4/17/20` <= 0, 0, log(.$`4/17/20`))) %>%
select(v))
i <- which(f$`Country/Region`=="France" & is.na(f$`Province/State`))
v <- my_stats[i, ] %>% as.numeric
my_coords <- coords[i, ] %>% as.matrix
sp_line <- one_geospark(my_coords, v, width=100, height=100, mode="log")
plot(st_geometry(sp_line))
max_v <- max(my_stats)
library(geosparklines)
library(geosparklines)
library(readr)
library(magrittr)
library(dplyr)
library(sf)
library(sp)
crs_string <- "+proj=eqc +lat_ts=0 +lat_1=-1000 +lon_1=-1000  +lat_2=1000 +lon_2=1000  +lat_0=0 +lon_0=0  +x_0=0 +y_0=0  +datum=WGS84 +units=m +no_defs"
my_crs <- crs_string %>% CRS
lapply(coords, funcion(x) st_point(coords[x, 1], coords[x, 1]))
lapply(coords, function(x) st_point(coords[x, 1], coords[x, 1]))
lapply(coords, function(x) st_point(coords[x, 1], coords[x, 2]))
lapply(1:nrow(coords), function(x) st_point(coords[x, 1], coords[x, 2]))
lapply(1:100, function(x) st_point(coords[x, 1], coords[x, 2]))
coords
lapply(1:100, function(x) st_point(as.numeric(coords[x, 1]), as.numeric(coords[x, 2])))
lapply(1:100, function(x) st_point(as.numeric(coords[x, 1]), as.numeric(coords[x, 2])))
x <- 1
lapply(1:100, function(x) st_point(as.numeric(coords[x, 1]), as.numeric(coords[x, 2])))
as.numeric(coords[x, 1])
as.numeric(coords[x, 2])
st_point(as.numeric(coords[x, 1]), as.numeric(coords[x, 2]))
?st_point
lapply(1:100, function(x) st_point(as.numeric(coords[x, ])))
lapply(1:100, function(x) st_point(as.numeric(coords[x, ]))) %>% st_sfc
lapply(1:100, function(x) st_point(as.numeric(coords[x, ]))) %>% st_sfc %>% st_set_crs(4326) %>% st_transorm(my_crs)
lapply(1:100, function(x) st_point(as.numeric(coords[x, ]))) %>% st_sfc %>% st_set_crs(4326) %>% st_transform(my_crs)
lapply(1:100, function(x) st_point(as.numeric(coords[x, ]))) %>% st_sfc %>% st_set_crs(4326) %>% st_transform(my_crs) %>% st_sfc %>% st_coordinates
geosparks
class(f)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(geosparklines)
library(readr)
library(magrittr)
library(dplyr)
library(sf)
f <- read_csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")
coords <- f[, c("Long", "Lat")]
my_stats <- f[, 5:ncol(f)]
## Whole world
geosparks <- geospark(coords, my_stats, width=100, height=100, mode = "log")
plot(st_geometry(geosparks))
st_geometry(f) <- geosparks
## Plot
plot(f %>%
mutate(v = ifelse(.$`4/17/20` <= 0, 0, log(.$`4/17/20`))) %>%
select(v))
st_write(f, "data/world_sparklines.gpkg")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(geosparklines)
library(readr)
library(magrittr)
library(dplyr)
library(sf)
f <- read_csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")
coords <- f[, c("Long", "Lat")]
my_stats <- f[, 5:ncol(f)]
## Whole world
geosparks <- geospark(coords, my_stats, width=100, height=100, mode = "log")
plot(st_geometry(geosparks))
st_geometry(f) <- geosparks
## Plot
plot(f %>%
mutate(v = ifelse(.$`4/17/20` <= 0, 0, log(.$`4/17/20`))) %>%
select(v))
st_write(f, "world_sparklines.gpkg")
library(sp)
crs_string <- "+proj=eqc +lat_ts=0 +lat_1=-1000 +lon_1=-1000  +lat_2=1000 +lon_2=1000  +lat_0=0 +lon_0=0  +x_0=0 +y_0=0  +datum=WGS84 +units=m +no_defs"
my_crs <- crs_string %>% CRS
coords_pc <- lapply(1:nrow(coords), function(x) st_point(as.numeric(coords[x, ]))) %>% st_sfc %>% st_set_crs(4326) %>% st_transform(my_crs) %>% st_sfc %>% st_coordinates
geosparks <- geospark(coords, my_stats, width=100, height=100, mode = "log")
i <- which(f$`Country/Region`=="France" & is.na(f$`Province/State`))
v <- my_stats[i, ] %>% as.numeric
my_coords <- coords[i, ] %>% as.matrix
sp_line <- one_geospark(my_coords, v, width=100, height=100, mode="log")
plot(st_geometry(sp_line))
sp_line <- one_geospark(my_coords, v, max_v = max(my_stats), width=100, height=100, mode="log")
plot(st_geometry(sp_line))
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(geosparklines)
library(readr)
library(magrittr)
library(dplyr)
library(sf)
f <- read_csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")
coords <- f[, c("Long", "Lat")]
my_stats <- f[, 5:ncol(f)]
## Whole world
geosparks <- geospark(coords, my_stats, width=100, height=100, mode = "log")
plot(st_geometry(geosparks))
st_geometry(f) <- geosparks
## Plot
plot(f %>%
mutate(v = ifelse(.$`4/17/20` <= 0, 0, log(.$`4/17/20`))) %>%
select(v))
st_write(f, "../data/world_sparklines.gpkg")
library(sp)
crs_string <- "+proj=eqc +lat_ts=0 +lat_1=-1000 +lon_1=-1000  +lat_2=1000 +lon_2=1000  +lat_0=0 +lon_0=0  +x_0=0 +y_0=0  +datum=WGS84 +units=m +no_defs"
my_crs <- crs_string %>% CRS
coords_pc <- lapply(1:nrow(coords), function(x) st_point(as.numeric(coords[x, ]))) %>% st_sfc %>% st_set_crs(4326) %>% st_transform(my_crs) %>% st_sfc %>% st_coordinates
geosparks <- geospark(coords, my_stats, width=100, height=100, mode = "log")
i <- which(f$`Country/Region`=="France" & is.na(f$`Province/State`))
v <- my_stats[i, ] %>% as.numeric
my_coords <- coords[i, ] %>% as.matrix
sp_line <- one_geospark(my_coords, v, width=100, height=100, mode="log")
plot(st_geometry(sp_line))
sp_line <- one_geospark(my_coords, v, max_v = max(my_stats), width=100, height=100, mode="log")
plot(st_geometry(sp_line))
coords <- f[, c("Long", "Lat")]
my_stats <- f[, 5:ncol(f)]
## Whole world
geosparks <- geospark(coords, my_stats, width=100, height=100, mode = "log")
f <- read_csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")
coords <- f[, c("Long", "Lat")]
my_stats <- f[, 5:ncol(f)]
## Whole world
geosparks <- geospark(coords, my_stats, width=100, height=100, mode = "log")
plot(st_geometry(geosparks))
## Plot
plot(f %>%
mutate(v = ifelse(.$`4/17/20` <= 0, 0, log(.$`4/17/20`))) %>%
select(v))
## Plot
plot(f %>%
mutate(v = ifelse(.$`4/17/20` <= 0, 0, log(.$`4/17/20`))) %>%
select(v))
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(geosparklines)
library(readr)
library(magrittr)
library(dplyr)
library(sf)
f <- read_csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")
coords <- f[, c("Long", "Lat")]
my_stats <- f[, 5:ncol(f)]
## Whole world
geosparks <- geospark(coords, my_stats, width=100, height=100, mode = "log")
plot(st_geometry(geosparks))
st_geometry(f) <- geosparks
## Plot
plot(f %>%
mutate(v = ifelse(.$`4/17/20` <= 0, 0, log(.$`4/17/20`))) %>%
select(v))
st_write(f, "../data/world_sparklines.gpkg")
library(sp)
crs_string <- "+proj=eqc +lat_ts=0 +lat_1=-1000 +lon_1=-1000  +lat_2=1000 +lon_2=1000  +lat_0=0 +lon_0=0  +x_0=0 +y_0=0  +datum=WGS84 +units=m +no_defs"
my_crs <- crs_string %>% CRS
coords_pc <- lapply(1:nrow(coords), function(x) st_point(as.numeric(coords[x, ]))) %>% st_sfc %>% st_set_crs(4326) %>% st_transform(my_crs) %>% st_sfc %>% st_coordinates
geosparks <- geospark(coords, my_stats, width=100, height=100, mode = "log")
i <- which(f$`Country/Region`=="France" & is.na(f$`Province/State`))
v <- my_stats[i, ] %>% as.numeric
my_coords <- coords[i, ] %>% as.matrix
sp_line <- one_geospark(my_coords, v, width=100, height=100, mode="log")
plot(st_geometry(sp_line))
sp_line <- one_geospark(my_coords, v, max_v = max(my_stats), width=100, height=100, mode="log")
plot(st_geometry(sp_line))
library(geosparklines)
library(readr)
library(magrittr)
library(dplyr)
library(sf)
library(geosparklines)
library(readr)
library(magrittr)
library(dplyr)
library(sf)
library(geosparklines)
library(readr)
library(magrittr)
library(dplyr)
library(sf)
library(geosparklines)
library(geosparklines)
library(readr)
library(magrittr)
library(dplyr)
library(sf)
## Whole world
geosparks <- geospark(coords, my_stats, width=20, height=20, mode = "log")
plot(st_geometry(geosparks))
coords_pc <- lapply(1:nrow(coords), function(x) st_point(as.numeric(coords[x, ]))) %>% st_sfc %>% st_set_crs(4326) %>% st_transform(my_crs) %>% st_sfc %>% st_coordinates
geosparks <- geospark(coords_pc, my_stats, width=100, height=100, mode = "log")
plot(geosparks)
geosparks <- geospark(coords_pc, my_stats, width=100000, height=100000, mode = "log")
plot(geosparks)
geosparks <- geospark(coords_pc, my_stats, width=1000000, height=1000000, mode = "log")
plot(geosparks)
library(geosparklines)
library(geosparklines)
install_github("datagistips/geosparklines")
install_github("datagistips/geosparklines")
library(devtools)
install_github("datagistips/geosparklines")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(geosparklines)
library(readr)
library(magrittr)
library(dplyr)
library(sf)
library(sp)
f <- read_csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")
coords <- f[, c("Long", "Lat")]
my_stats <- f[, 5:ncol(f)]
## Whole world
geosparks <- geospark(coords, my_stats, width=20, height=20, mode = "log")
plot(st_geometry(geosparks))
st_geometry(f) <- geosparks
## Plot
plot(f %>%
mutate(v = ifelse(.$`4/17/20` <= 0, 0, log(.$`4/17/20`))) %>%
select(v))
library(sp)
crs_string <- "+proj=eqc +lat_ts=0 +lat_1=-1000 +lon_1=-1000  +lat_2=1000 +lon_2=1000  +lat_0=0 +lon_0=0  +x_0=0 +y_0=0  +datum=WGS84 +units=m +no_defs"
my_crs <- crs_string %>% CRS
coords_pc <- lapply(1:nrow(coords), function(x) st_point(as.numeric(coords[x, ]))) %>% st_sfc %>% st_set_crs(4326) %>% st_transform(my_crs) %>% st_sfc %>% st_coordinates
geosparks <- geospark(coords_pc, my_stats, width=1000000, height=1000000, mode = "log")
plot(geosparks)
i <- which(f$`Country/Region`=="France" & is.na(f$`Province/State`))
v <- my_stats[i, ] %>% as.numeric
my_coords <- coords[i, ] %>% as.matrix
sp_line <- one_geospark(my_coords, v, width=20, height=20, mode="log")
plot(st_geometry(sp_line))
sp_line <- one_geospark(my_coords, v, max_v = max(my_stats), width=20, height=20, mode="log")
plot(st_geometry(sp_line))
library(geosparklines)
help(package = 'geosparklines', help_type = 'html')
browseVignettes('geosparklines')
help(package = 'geosparklines', help_type = 'html')
library(geosparklines)
help(package = 'geosparklines', help_type = 'html')
browseVignettes('geosparklines')
library(geosparklines)
library(geosparklines)
help(package = 'geosparklines', help_type = 'html')
library(geosparklines)
help(package = 'geosparklines', help_type = 'html')
evtools::build_vignettes()
devtools::build_vignettes()
library(geosparklines)
help(package = 'geosparklines', help_type = 'html')
browseVignettes('geosparklines')
devtools::build_vignettes()
devtools::build_vignettes()
help(package = 'geosparklines', help_type = 'html')
library(geosparklines)
?devtools::install
devtools::install(build_vignettes = TRUE)
library(geosparklines)
geosparl
geospark
?install_github
devtools::build_vignettes()
library(geosparklines)
devtools::build_vignettes()
devtools::build()
rmarkdown::render
getwd()
rmarkdown::render(input = "vignettes/how-to-use-geosparklines.Rmd", output = "vignettes/how-to-use-geosparklines.htmml")
rmarkdown::render(input = "vignettes/how-to-use-geosparklines.Rmd", output = "vignettes/how-to-use-geosparklines.html")
rmarkdown::render(input = "vignettes/how-to-use-geosparklines.Rmd", output_file = "vignettes/how-to-use-geosparklines.html")
rmarkdown::render(input = "vignettes/how-to-use-geosparklines.Rmd", output_file = "vignettes")
rmarkdown::render(input = "vignettes/how-to-use-geosparklines.Rmd", output_file = "how.html")
rmarkdown::render(input = "vignettes/how-to-use-geosparklines.Rmd", output_file = "vignettes/how-to-use-geosparklines.html")
rmarkdown::render(input = "vignettes/how-to-use-geosparklines.Rmd", output_file = "how-to-use-geosparklines.html")
names(f)
library(geosparklines)
library(readr)
library(magrittr)
library(dplyr)
library(sf)
library(sp)
## Whole world
geosparks <- geospark(coords, my_stats, width=20, height=20, mode = "log")
plot(st_geometry(geosparks))
st_bbox(geosparks)
## Whole world
geosparks <- geospark(coords, my_stats, width=20, height=20, mode = "log")
bb <- st_bbox(geosparks)
plot(st_geometry(geosparks), xlim  = c(bb$xmin, bb$xmax), ylim=c(bb$ymin, bb$ymax))
plot(st_geometry(geosparks))
## Whole world
geosparks <- geospark(coords, my_stats, width=20, height=20, mode = "log")
bb <- st_bbox(geosparks)
plot(st_geometry(geosparks), xlim  = c(bb$xmin, bb$xmax), ylim=c(bb$ymin, bb$ymax))
plot(st_geometry(geosparks))
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(geosparklines)
library(readr)
library(magrittr)
library(dplyr)
library(sf)
library(sp)
f <- read_csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")
coords <- f[, c("Long", "Lat")]
my_stats <- f[, 5:ncol(f)]
## Whole world
geosparks <- geospark(coords, my_stats, width=20, height=20, mode = "log")
plot(st_geometry(geosparks))
st_geometry(f) <- geosparks
## Plot
plot(f %>%
mutate(v = ifelse(.$`4/17/20` <= 0, 0, log(.$`4/17/20`))) %>%
select(v))
library(sp)
crs_string <- "+proj=eqc +lat_ts=0 +lat_1=-1000 +lon_1=-1000  +lat_2=1000 +lon_2=1000  +lat_0=0 +lon_0=0  +x_0=0 +y_0=0  +datum=WGS84 +units=m +no_defs"
my_crs <- crs_string %>% CRS
coords_pc <- lapply(1:nrow(coords), function(x) st_point(as.numeric(coords[x, ]))) %>% st_sfc %>% st_set_crs(4326) %>% st_transform(my_crs) %>% st_sfc %>% st_coordinates
geosparks <- geospark(coords_pc, my_stats, width=1000000, height=1000000, mode = "log")
plot(geosparks)
i <- which(f$`Country/Region`=="France" & is.na(f$`Province/State`))
v <- my_stats[i, ] %>% as.numeric
my_coords <- coords[i, ] %>% as.matrix
sp_line <- one_geospark(my_coords, v, width=20, height=20, mode="log")
plot(st_geometry(sp_line))
sp_line <- one_geospark(my_coords, v, max_v = max(my_stats), width=20, height=20, mode="log")
plot(st_geometry(sp_line))
install_github("datagistips/geosparklines")
devtools::install_github("datagistips/geosparklines")
devtools::install_github("datagistips/geosparklines", build_vignettes = TRUE)
devtools::install_github("datagistips/geosparklines", build_vignettes = TRUE, force = TRUE)
browseVignettes("geosparklines")
help(package = 'geosparklines', help_type = 'html')
library(geosparklines)
help(package = 'geosparklines', help_type = 'html')
f <- read_csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")
library(readr)
f <- read_csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")
coords <- f[, c("Long", "Lat")]
my_stats <- f[, 5:ncol(f)]
crs_string <- "+proj=eqc +lat_ts=0 +lat_1=-1000 +lon_1=-1000  +lat_2=1000 +lon_2=1000  +lat_0=0 +lon_0=0  +x_0=0 +y_0=0  +datum=WGS84 +units=m +no_defs"
my_crs <- crs_string %>% CRS
library(magrittr)
crs_string <- "+proj=eqc +lat_ts=0 +lat_1=-1000 +lon_1=-1000  +lat_2=1000 +lon_2=1000  +lat_0=0 +lon_0=0  +x_0=0 +y_0=0  +datum=WGS84 +units=m +no_defs"
my_crs <- crs_string %>% CRS
library(sp)
crs_string <- "+proj=eqc +lat_ts=0 +lat_1=-1000 +lon_1=-1000  +lat_2=1000 +lon_2=1000  +lat_0=0 +lon_0=0  +x_0=0 +y_0=0  +datum=WGS84 +units=m +no_defs"
my_crs <- crs_string %>% CRS
library(sf)
coords_pc <- lapply(1:nrow(coords), function(x) st_point(as.numeric(coords[x, ]))) %>% st_sfc %>% st_set_crs(4326) %>% st_transform(my_crs) %>% st_sfc %>% st_coordinates
geosparks <- geospark(coords_pc, my_stats, width=1000000, height=1000000, mode = "log")
plot(geosparks)
st_geometry(f) <- geosparks
getwd("")
getwd()
st_write("C:/temp/data.gpkg")
st_write(f, "C:/temp/data.gpkg")
st_write(f, "C:/Documents and Settings/math")
st_write(f, "C:/data.gpkg")
st_write(f, "C:/Users/mathieu.rajerison/Desktop/data.gpkg")
names(f)
